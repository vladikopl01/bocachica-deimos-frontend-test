/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace BCDeimosContract {
  export type SaleMetadataStruct = {
    name: string;
    symbol: string;
    description: string;
    smartContractURL: string;
    logoURL: string;
    outputTicker: string;
    projectTelegram: string;
    projectMedium: string;
    projectTwitter: string;
    rewardTimestamp: BigNumberish;
    rewardDescription: string;
  };

  export type SaleMetadataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    name: string;
    symbol: string;
    description: string;
    smartContractURL: string;
    logoURL: string;
    outputTicker: string;
    projectTelegram: string;
    projectMedium: string;
    projectTwitter: string;
    rewardTimestamp: BigNumber;
    rewardDescription: string;
  };

  export type ParticipantStruct = {
    depositedAmount: BigNumberish;
    claimedAmount: BigNumberish;
    refundedAmount: BigNumberish;
  };

  export type ParticipantStructOutput = [BigNumber, BigNumber, BigNumber] & {
    depositedAmount: BigNumber;
    claimedAmount: BigNumber;
    refundedAmount: BigNumber;
  };

  export type SaleInfoStruct = {
    saleType: BigNumberish;
    depositToken: string;
    minDeposit: BigNumberish;
    maxDeposit: BigNumberish;
    targetDeposit: BigNumberish;
    currentDeposit: BigNumberish;
    distributeToken: string;
    targetDistribute: BigNumberish;
    startDate: BigNumberish;
    endDate: BigNumberish;
    isClaimAvailable: boolean;
    isRefundAvailable: boolean;
  };

  export type SaleInfoStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    saleType: number;
    depositToken: string;
    minDeposit: BigNumber;
    maxDeposit: BigNumber;
    targetDeposit: BigNumber;
    currentDeposit: BigNumber;
    distributeToken: string;
    targetDistribute: BigNumber;
    startDate: BigNumber;
    endDate: BigNumber;
    isClaimAvailable: boolean;
    isRefundAvailable: boolean;
  };
}

export interface BCDeimosContractInterface extends utils.Interface {
  functions: {
    "claim(uint32)": FunctionFragment;
    "createSale(uint8,address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "deposit(uint32,uint256)": FunctionFragment;
    "getMetadata(uint32)": FunctionFragment;
    "getParticipant(uint32,address)": FunctionFragment;
    "getSale(uint32)": FunctionFragment;
    "getSaleCount()": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "refund(uint32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setClaimStatus(uint32,bool)": FunctionFragment;
    "setRefundStatus(uint32,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMetadata(uint32,(string,string,string,string,string,string,string,string,string,uint64,string))": FunctionFragment;
    "updateSale(uint32,uint8,address,uint256,uint256,uint256,uint256,address,uint256,uint32,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "createSale"
      | "deposit"
      | "getMetadata"
      | "getParticipant"
      | "getSale"
      | "getSaleCount"
      | "initialize"
      | "owner"
      | "refund"
      | "renounceOwnership"
      | "setClaimStatus"
      | "setRefundStatus"
      | "transferOwnership"
      | "updateMetadata"
      | "updateSale"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipant",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [BigNumberish, BCDeimosContract.SaleMetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSale",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSaleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSale", data: BytesLike): Result;

  events: {
    "Claim(uint32,address,uint256)": EventFragment;
    "ClaimStatusChangedTo(uint32,bool)": EventFragment;
    "Deposit(uint32,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Refund(uint32,address,uint256)": EventFragment;
    "RefundStatusChangedTo(uint32,bool)": EventFragment;
    "SaleCreated(uint32,uint8,address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,bool,bool)": EventFragment;
    "SaleMetadataUpdated(uint32,string,string,string,string,string,string,string,string,string,uint64,string)": EventFragment;
    "SaleUpdated(uint32,uint8,address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimStatusChangedTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundStatusChangedTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleMetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleUpdated"): EventFragment;
}

export interface ClaimEventObject {
  saleId_: number;
  sender_: string;
  amount_: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [number, string, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ClaimStatusChangedToEventObject {
  saleId_: number;
  newClaimStatus_: boolean;
}
export type ClaimStatusChangedToEvent = TypedEvent<
  [number, boolean],
  ClaimStatusChangedToEventObject
>;

export type ClaimStatusChangedToEventFilter =
  TypedEventFilter<ClaimStatusChangedToEvent>;

export interface DepositEventObject {
  saleId_: number;
  sender_: string;
  amount_: BigNumber;
}
export type DepositEvent = TypedEvent<
  [number, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RefundEventObject {
  saleId_: number;
  sender_: string;
  amount_: BigNumber;
}
export type RefundEvent = TypedEvent<
  [number, string, BigNumber],
  RefundEventObject
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface RefundStatusChangedToEventObject {
  saleId_: number;
  newRefundStatus_: boolean;
}
export type RefundStatusChangedToEvent = TypedEvent<
  [number, boolean],
  RefundStatusChangedToEventObject
>;

export type RefundStatusChangedToEventFilter =
  TypedEventFilter<RefundStatusChangedToEvent>;

export interface SaleCreatedEventObject {
  saleId_: number;
  saleType_: number;
  depositToken_: string;
  minDeposit_: BigNumber;
  maxDeposit_: BigNumber;
  targetDeposit_: BigNumber;
  currentDeposit_: BigNumber;
  distributeToken_: string;
  targetDistribute_: BigNumber;
  startDate_: BigNumber;
  endDate_: BigNumber;
  isClaimAvailable_: boolean;
  isRefundAvailable_: boolean;
}
export type SaleCreatedEvent = TypedEvent<
  [
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ],
  SaleCreatedEventObject
>;

export type SaleCreatedEventFilter = TypedEventFilter<SaleCreatedEvent>;

export interface SaleMetadataUpdatedEventObject {
  saleId_: number;
  name_: string;
  symbol_: string;
  description_: string;
  smartContractURL_: string;
  logoURL_: string;
  outputTicker_: string;
  projectTelegram_: string;
  projectMedium_: string;
  projectTwitter_: string;
  rewardTimestamp_: BigNumber;
  rewardDescription_: string;
}
export type SaleMetadataUpdatedEvent = TypedEvent<
  [
    number,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string
  ],
  SaleMetadataUpdatedEventObject
>;

export type SaleMetadataUpdatedEventFilter =
  TypedEventFilter<SaleMetadataUpdatedEvent>;

export interface SaleUpdatedEventObject {
  saleId_: number;
  saleType_: number;
  depositToken_: string;
  minDeposit_: BigNumber;
  maxDeposit_: BigNumber;
  targetDeposit_: BigNumber;
  currentDeposit_: BigNumber;
  distributeToken_: string;
  targetDistribute_: BigNumber;
  startDate_: BigNumber;
  endDate_: BigNumber;
}
export type SaleUpdatedEvent = TypedEvent<
  [
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  SaleUpdatedEventObject
>;

export type SaleUpdatedEventFilter = TypedEventFilter<SaleUpdatedEvent>;

export interface BCDeimosContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BCDeimosContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      saleId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSale(
      saleType_: BigNumberish,
      depositToken_: string,
      minDeposit_: BigNumberish,
      maxDeposit_: BigNumberish,
      targetDeposit_: BigNumberish,
      currentDeposit_: BigNumberish,
      distributeToken_: string,
      targetDistribute_: BigNumberish,
      startDate_: BigNumberish,
      endDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      saleId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMetadata(
      saleId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BCDeimosContract.SaleMetadataStructOutput]>;

    getParticipant(
      saleId_: BigNumberish,
      address_: string,
      overrides?: CallOverrides
    ): Promise<[string, BCDeimosContract.ParticipantStructOutput]>;

    getSale(
      saleId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BCDeimosContract.SaleInfoStructOutput]>;

    getSaleCount(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    refund(
      saleId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimStatus(
      saleId_: BigNumberish,
      status_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRefundStatus(
      saleId_: BigNumberish,
      status_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMetadata(
      saleId_: BigNumberish,
      metadata_: BCDeimosContract.SaleMetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSale(
      saleId_: BigNumberish,
      saleType_: BigNumberish,
      depositToken_: string,
      minDeposit_: BigNumberish,
      maxDeposit_: BigNumberish,
      targetDeposit_: BigNumberish,
      currentDeposit_: BigNumberish,
      distributeToken_: string,
      targetDistribute_: BigNumberish,
      startDate_: BigNumberish,
      endDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    saleId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSale(
    saleType_: BigNumberish,
    depositToken_: string,
    minDeposit_: BigNumberish,
    maxDeposit_: BigNumberish,
    targetDeposit_: BigNumberish,
    currentDeposit_: BigNumberish,
    distributeToken_: string,
    targetDistribute_: BigNumberish,
    startDate_: BigNumberish,
    endDate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    saleId_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMetadata(
    saleId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BCDeimosContract.SaleMetadataStructOutput]>;

  getParticipant(
    saleId_: BigNumberish,
    address_: string,
    overrides?: CallOverrides
  ): Promise<[string, BCDeimosContract.ParticipantStructOutput]>;

  getSale(
    saleId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BCDeimosContract.SaleInfoStructOutput]>;

  getSaleCount(overrides?: CallOverrides): Promise<number>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  refund(
    saleId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimStatus(
    saleId_: BigNumberish,
    status_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRefundStatus(
    saleId_: BigNumberish,
    status_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMetadata(
    saleId_: BigNumberish,
    metadata_: BCDeimosContract.SaleMetadataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSale(
    saleId_: BigNumberish,
    saleType_: BigNumberish,
    depositToken_: string,
    minDeposit_: BigNumberish,
    maxDeposit_: BigNumberish,
    targetDeposit_: BigNumberish,
    currentDeposit_: BigNumberish,
    distributeToken_: string,
    targetDistribute_: BigNumberish,
    startDate_: BigNumberish,
    endDate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(saleId_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createSale(
      saleType_: BigNumberish,
      depositToken_: string,
      minDeposit_: BigNumberish,
      maxDeposit_: BigNumberish,
      targetDeposit_: BigNumberish,
      currentDeposit_: BigNumberish,
      distributeToken_: string,
      targetDistribute_: BigNumberish,
      startDate_: BigNumberish,
      endDate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      saleId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMetadata(
      saleId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BCDeimosContract.SaleMetadataStructOutput]>;

    getParticipant(
      saleId_: BigNumberish,
      address_: string,
      overrides?: CallOverrides
    ): Promise<[string, BCDeimosContract.ParticipantStructOutput]>;

    getSale(
      saleId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BCDeimosContract.SaleInfoStructOutput]>;

    getSaleCount(overrides?: CallOverrides): Promise<number>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    refund(saleId_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setClaimStatus(
      saleId_: BigNumberish,
      status_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefundStatus(
      saleId_: BigNumberish,
      status_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMetadata(
      saleId_: BigNumberish,
      metadata_: BCDeimosContract.SaleMetadataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSale(
      saleId_: BigNumberish,
      saleType_: BigNumberish,
      depositToken_: string,
      minDeposit_: BigNumberish,
      maxDeposit_: BigNumberish,
      targetDeposit_: BigNumberish,
      currentDeposit_: BigNumberish,
      distributeToken_: string,
      targetDistribute_: BigNumberish,
      startDate_: BigNumberish,
      endDate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claim(uint32,address,uint256)"(
      saleId_?: BigNumberish | null,
      sender_?: string | null,
      amount_?: null
    ): ClaimEventFilter;
    Claim(
      saleId_?: BigNumberish | null,
      sender_?: string | null,
      amount_?: null
    ): ClaimEventFilter;

    "ClaimStatusChangedTo(uint32,bool)"(
      saleId_?: BigNumberish | null,
      newClaimStatus_?: null
    ): ClaimStatusChangedToEventFilter;
    ClaimStatusChangedTo(
      saleId_?: BigNumberish | null,
      newClaimStatus_?: null
    ): ClaimStatusChangedToEventFilter;

    "Deposit(uint32,address,uint256)"(
      saleId_?: BigNumberish | null,
      sender_?: string | null,
      amount_?: null
    ): DepositEventFilter;
    Deposit(
      saleId_?: BigNumberish | null,
      sender_?: string | null,
      amount_?: null
    ): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Refund(uint32,address,uint256)"(
      saleId_?: BigNumberish | null,
      sender_?: string | null,
      amount_?: null
    ): RefundEventFilter;
    Refund(
      saleId_?: BigNumberish | null,
      sender_?: string | null,
      amount_?: null
    ): RefundEventFilter;

    "RefundStatusChangedTo(uint32,bool)"(
      saleId_?: BigNumberish | null,
      newRefundStatus_?: null
    ): RefundStatusChangedToEventFilter;
    RefundStatusChangedTo(
      saleId_?: BigNumberish | null,
      newRefundStatus_?: null
    ): RefundStatusChangedToEventFilter;

    "SaleCreated(uint32,uint8,address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,bool,bool)"(
      saleId_?: BigNumberish | null,
      saleType_?: null,
      depositToken_?: string | null,
      minDeposit_?: null,
      maxDeposit_?: null,
      targetDeposit_?: null,
      currentDeposit_?: null,
      distributeToken_?: string | null,
      targetDistribute_?: null,
      startDate_?: null,
      endDate_?: null,
      isClaimAvailable_?: null,
      isRefundAvailable_?: null
    ): SaleCreatedEventFilter;
    SaleCreated(
      saleId_?: BigNumberish | null,
      saleType_?: null,
      depositToken_?: string | null,
      minDeposit_?: null,
      maxDeposit_?: null,
      targetDeposit_?: null,
      currentDeposit_?: null,
      distributeToken_?: string | null,
      targetDistribute_?: null,
      startDate_?: null,
      endDate_?: null,
      isClaimAvailable_?: null,
      isRefundAvailable_?: null
    ): SaleCreatedEventFilter;

    "SaleMetadataUpdated(uint32,string,string,string,string,string,string,string,string,string,uint64,string)"(
      saleId_?: BigNumberish | null,
      name_?: null,
      symbol_?: null,
      description_?: null,
      smartContractURL_?: null,
      logoURL_?: null,
      outputTicker_?: null,
      projectTelegram_?: null,
      projectMedium_?: null,
      projectTwitter_?: null,
      rewardTimestamp_?: null,
      rewardDescription_?: null
    ): SaleMetadataUpdatedEventFilter;
    SaleMetadataUpdated(
      saleId_?: BigNumberish | null,
      name_?: null,
      symbol_?: null,
      description_?: null,
      smartContractURL_?: null,
      logoURL_?: null,
      outputTicker_?: null,
      projectTelegram_?: null,
      projectMedium_?: null,
      projectTwitter_?: null,
      rewardTimestamp_?: null,
      rewardDescription_?: null
    ): SaleMetadataUpdatedEventFilter;

    "SaleUpdated(uint32,uint8,address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256)"(
      saleId_?: BigNumberish | null,
      saleType_?: null,
      depositToken_?: string | null,
      minDeposit_?: null,
      maxDeposit_?: null,
      targetDeposit_?: null,
      currentDeposit_?: null,
      distributeToken_?: string | null,
      targetDistribute_?: null,
      startDate_?: null,
      endDate_?: null
    ): SaleUpdatedEventFilter;
    SaleUpdated(
      saleId_?: BigNumberish | null,
      saleType_?: null,
      depositToken_?: string | null,
      minDeposit_?: null,
      maxDeposit_?: null,
      targetDeposit_?: null,
      currentDeposit_?: null,
      distributeToken_?: string | null,
      targetDistribute_?: null,
      startDate_?: null,
      endDate_?: null
    ): SaleUpdatedEventFilter;
  };

  estimateGas: {
    claim(
      saleId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSale(
      saleType_: BigNumberish,
      depositToken_: string,
      minDeposit_: BigNumberish,
      maxDeposit_: BigNumberish,
      targetDeposit_: BigNumberish,
      currentDeposit_: BigNumberish,
      distributeToken_: string,
      targetDistribute_: BigNumberish,
      startDate_: BigNumberish,
      endDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      saleId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMetadata(
      saleId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipant(
      saleId_: BigNumberish,
      address_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSale(
      saleId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      saleId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimStatus(
      saleId_: BigNumberish,
      status_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRefundStatus(
      saleId_: BigNumberish,
      status_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMetadata(
      saleId_: BigNumberish,
      metadata_: BCDeimosContract.SaleMetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSale(
      saleId_: BigNumberish,
      saleType_: BigNumberish,
      depositToken_: string,
      minDeposit_: BigNumberish,
      maxDeposit_: BigNumberish,
      targetDeposit_: BigNumberish,
      currentDeposit_: BigNumberish,
      distributeToken_: string,
      targetDistribute_: BigNumberish,
      startDate_: BigNumberish,
      endDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      saleId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSale(
      saleType_: BigNumberish,
      depositToken_: string,
      minDeposit_: BigNumberish,
      maxDeposit_: BigNumberish,
      targetDeposit_: BigNumberish,
      currentDeposit_: BigNumberish,
      distributeToken_: string,
      targetDistribute_: BigNumberish,
      startDate_: BigNumberish,
      endDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      saleId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMetadata(
      saleId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipant(
      saleId_: BigNumberish,
      address_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSale(
      saleId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      saleId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimStatus(
      saleId_: BigNumberish,
      status_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRefundStatus(
      saleId_: BigNumberish,
      status_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMetadata(
      saleId_: BigNumberish,
      metadata_: BCDeimosContract.SaleMetadataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSale(
      saleId_: BigNumberish,
      saleType_: BigNumberish,
      depositToken_: string,
      minDeposit_: BigNumberish,
      maxDeposit_: BigNumberish,
      targetDeposit_: BigNumberish,
      currentDeposit_: BigNumberish,
      distributeToken_: string,
      targetDistribute_: BigNumberish,
      startDate_: BigNumberish,
      endDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
